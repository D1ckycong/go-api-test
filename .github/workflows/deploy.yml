name: Build and Deploy to ECS

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      id: build-image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
        docker push ${{ secrets.ECR_REPOSITORY }}:latest

    - name: Update ECS task definition
      id: task-def
      run: |
        FAMILY=$(aws ecs describe-task-definition --task-definition your-task-def-name | jq -r '.taskDefinition.family')
        REVISION=$(aws ecs describe-task-definition --task-definition your-task-def-name | jq -r '.taskDefinition.revision')
        CONTAINER_DEFINITIONS=$(aws ecs describe-task-definition --task-definition your-task-def-name | jq -r '.taskDefinition.containerDefinitions')
        NEW_IMAGE="${{ secrets.ECR_REPOSITORY }}:latest"

        NEW_TASK_DEF=$(jq -n --arg family "$FAMILY" --argjson containerDefinitions "$CONTAINER_DEFINITIONS" \
          --arg image "$NEW_IMAGE" '{
            family: $family,
            containerDefinitions: ($containerDefinitions | map(if .image != $image then .image = $image else . end))
          }')

        echo "$NEW_TASK_DEF" > new-task-def.json

        aws ecs register-task-definition --cli-input-json file://new-task-def.json

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: new-task-def.json
        service: ${{ secrets.ECS_SERVICE_NAME }}
        cluster: ${{ secrets.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true